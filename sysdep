#! /usr/bin/env python3
"""Print information about the system deployment."""

from json import load
from os import linesep
from urllib.error import HTTPError
from urllib.request import urlopen

DEPLOYMENT_URL = 'http://10.8.0.1/appcmd/deployment'
BOLD = '\033[1m'
CLEAR = '\033[0m'


class Table(dict):
    """Key-value table."""

    def __new__(cls, indent=' ', spacing='  '):     # pylint: disable=W0613
        """Constructor override."""
        return super().__new__(cls)

    def __init__(self, indent=' ', spacing='  '):
        """Initializes the key order list."""
        super().__init__()
        self.indent = indent
        self.spacing = spacing
        self._key_order = []

    def __setitem__(self, key, value):
        """Adds an item."""
        if key not in self._key_order:
            self._key_order.append(key)

        return super().__setitem__(key, value)

    def __str__(self):
        """Returns the table as string."""
        return linesep.join(self.lines())

    def items(self):
        """Yields ordered key value pairs."""
        for key in self._key_order:
            yield (key, self[key])

    def lines(self):
        """Yields the string lines."""
        maxlen = max(len(key) for key in self)

        for key, value in self.items():
            indent_factor = maxlen - len(key)
            indentation = self.indent * indent_factor
            indentation += self.spacing
            yield BOLD + f'{key}:' + CLEAR + indentation + str(value)


def get_json(url):
    """Returns a JSON response from the given URL."""

    with urlopen(url) as response:
        return load(response)


def address_to_string(address):
    """Prints the respective address object."""

    street = address['street']
    house_number = address['houseNumber']
    zip_code = address['zipCode']
    city = address['city']
    return f'{street} {house_number}, {zip_code} {city}'


def make_table(json):
    """Prints the deployment information from a JSON object."""

    table = Table()
    table['Customer ID'] = json['customer']['id']
    table['Customer name'] = json['customer']['company']['name']
    table['Type'] = json['type']
    table['Connection'] = json['connection']
    table['Address'] = address_to_string(json['address'])
    lpt_address = json.get('lptAddress')

    if lpt_address:
        table['LPT address'] = address_to_string(lpt_address)

    scheduled = json.get('scheduled')

    if scheduled:
        table['Scheduled'] = scheduled

    annotation = json.get('annotation')

    if annotation:
        table['Annotation'] = annotation

    table['Testing'] = '✓' if json['testing'] else '✗'

    timestamp = json.get('timestamp')

    if timestamp:
        table['Timestamp'] = timestamp

    return table


def main():
    """Runs the script."""

    try:
        json = get_json(DEPLOYMENT_URL)
    except HTTPError as http_error:
        print('Got HTTP error:', http_error.file.read().decode())
    else:
        table = make_table(json)
        print(table)


if __name__ == '__main__':
    main()
