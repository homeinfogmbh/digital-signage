#! /usr/bin/env python3
#
#  sysrq-reboot - Reboots the system via sysrq
#
#  This file is part of digital-signage.
#
#  digital-signage is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  digital-signage is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with digital-signage.  If not, see <http://www.gnu.org/licenses/>.
#
#  This unit provides a service to automatically login
#  the digital signage user to a certain terminal.
#
#  (C) 2019: HOMEINFO - Digitale Informationssysteme GmbH
#
#  Maintainer: Richard Neumann <r dot neumann at homeinfo period de>
#
###############################################################################
"""Reboots the system via sysrq."""

from argparse import ArgumentParser
from enum import Enum
from logging import INFO, basicConfig, getLogger
from os import linesep
from pathlib import Path
from sys import exit    # pylint: disable=W0622
from time import sleep


__all__ = [
    'SYSRQ',
    'SYSRQ_TRIGGER',
    'State',
    'Sysrq',
    'set_sysrq',
    'sysrq_trigger',
    'reboot',
]


LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'
LOGGER = getLogger('sysrq-reboot')
SYSRQ = Path('/proc/sys/kernel/sysrq')
SYSRQ_TRIGGER = Path('/proc/sysrq-trigger')


class State(Enum):
    """Sysrq state."""

    ENABLED = '1'
    DISABLED = '0'


class Sysrq(Enum):
    """Sysrq codes."""

    SYNC = 's'
    UMOUNT = 'u'
    REBOOT = 'b'


def set_sysrq(state):
    """Sets the sysrq function."""

    with SYSRQ.open('w') as file:
        file.write(state.value + linesep)


def sysrq_trigger(sysrq):
    """Performs a sysrq trigger."""

    with SYSRQ_TRIGGER.open('w') as file:
        file.write(sysrq.value + linesep)


def reboot(interval=1):
    """Reset."""

    set_sysrq(State.ENABLED)

    for sysrq in Sysrq:
        LOGGER.info('Sending: %s.', sysrq)
        sysrq_trigger(sysrq)
        sleep(interval)


def get_args():
    """Returns the command line arguments."""

    parser = ArgumentParser(description='Reboot the system via sysrq.')
    parser.add_argument(
        '--interval', type=float, default=1,
        help='interval in seconds between sysrq triggers')
    return parser.parse_args()


def main():
    """Runs the script."""

    basicConfig(format=LOG_FORMAT, level=INFO)
    args = get_args()

    try:
        reboot(interval=args.interval)
    except PermissionError:
        LOGGER.error('You must be root to run this script.')
        exit(1)


if __name__ == '__main__':
    main()
