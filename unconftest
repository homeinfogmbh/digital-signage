#! /usr/bin/env python3
#
#  unconftest - On-screen missing configuration warning.
#
#  This file is part of digital-signage.
#
#  digital-signage is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  digital-signage is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with digital-signage.  If not, see <http://www.gnu.org/licenses/>.
#
#  This unit provides a service to automatically login
#  the digital signage user to a certain terminal.
#
#  (C) 2015: HOMEINFO - Digitale Informationssysteme GmbH
#
#  Maintainer: Richard Neumann <r dot neumann at homeinfo period de>
#
##########################################################################
"""On-screen missing configuration warning and touchscreen test."""

from sys import stderr
from tkinter import Tk, Label, Button


FONT = ('DejavuSans', 64)
BUTTON_TEXT = 'Click me\nto move me.'


class SelfMovingButton(Button):
    """A button that moves itself randomly
    on the screen when it is clicked.
    """

    def __init__(self, *args, yoffset=0, **kwargs):
        super().__init__(*args, command=self.move, **kwargs)
        self.yoffset = yoffset

    @property
    def window_size(self):
        """Returns the window size."""
        return (self.master.winfo_width(), self.master.winfo_height())

    @property
    def max_coordinates(self):
        """Returns the maximum coordinates."""
        width, height = self.window_size
        return (width - self.winfo_width(), height - self.winfo_height())

    @property
    def random_coordinates(self):
        """Returns random coordinates."""
        from random import randint
        max_x, max_y = self.max_coordinates
        return (randint(0, max_x), randint(self.yoffset, max_y))


    def move(self):
        """Moves the button randomly."""
        print('### Move event ###')

        try:
            x_coord, y_coord = self.random_coordinates
        except SystemError:
            self['text'] = 'Waiting for RNG.'
            print('Random number generator is not yet ready.', file=stderr,
                  flush=True)
        else:
            self['text'] = BUTTON_TEXT
            self.place_configure(x=x_coord, y=y_coord)
            print('New random location: {}x{}'.format(x_coord, y_coord))

        print('### End event ###', flush=True)


def main():
    """Runs the on-screen warning and test."""

    print('Starting up.')
    gui = Tk()
    gui.configure(background='black')
    gui.attributes("-fullscreen", True)
    screen_size = '{}x{}'.format(
        gui.winfo_screenwidth(), gui.winfo_screenheight())
    print('Screen size is:', screen_size)
    gui.geometry(screen_size)
    label = Label(
        gui, text='WARNING: Not configured!', font=FONT, background='black',
        fg='yellow')
    label.pack()
    btn = SelfMovingButton(
        gui, yoffset=label.winfo_height(), text=BUTTON_TEXT)
    btn.pack()
    print('Entering main loop.', flush=True)
    gui.mainloop()


if __name__ == '__main__':
    main()
